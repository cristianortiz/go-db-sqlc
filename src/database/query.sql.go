// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  firstname,lastname,email,upassword,isambassador
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Firstname    string
	Lastname     string
	Email        string
	Upassword    string
	Isambassador sql.NullInt32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Upassword,
		arg.Isambassador,
	)
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
 SELECT id, firstname, lastname, email, upassword, isambassador FROM users
 ORDER BY name
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Upassword,
			&i.Isambassador,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
 SELECT id, firstname, lastname, email, upassword, isambassador FROM users
 WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Upassword,
		&i.Isambassador,
	)
	return i, err
}
